name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run linting (if available)
      run: |
        # Run basic Python syntax checks
        python -m py_compile src/*.py
        echo "✅ Syntax check passed"
      continue-on-error: true
      
    - name: Run unit tests
      run: |
        pytest -v --tb=short --durations=10 --maxfail=3
        
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
      
    - name: Test basic functionality
      run: |
        python daily_culture_bot.py --fast --count 1 --output
        echo "✅ Basic functionality test passed"
        
    - name: Test complementary mode
      run: |
        python daily_culture_bot.py --complementary --fast --count 1
        echo "✅ Complementary mode test passed"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test email integration (if configured)
      run: |
        # Only run if email secrets are available
        if [ -n "${{ secrets.SMTP_HOST }}" ]; then
          echo "Testing email integration..."
          python daily_culture_bot.py --fast --email ${{ secrets.TEST_EMAIL || 'test@example.com' }}
        else
          echo "⚠️ Email integration test skipped (no SMTP secrets configured)"
        fi
      continue-on-error: true
      
    - name: Test OpenAI integration (if configured)
      run: |
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "Testing OpenAI integration..."
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          python daily_culture_bot.py --complementary --fast --count 1
        else
          echo "⚠️ OpenAI integration test skipped (no API key configured)"
        fi
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run security scan
      run: |
        pip install safety bandit
        echo "Running safety check..."
        safety check --json || true
        echo "Running bandit security scan..."
        bandit -r src/ -f json || true
      continue-on-error: true

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify package structure
      run: |
        echo "Checking package structure..."
        ls -la src/
        python -c "import src.daily_paintings; print('✅ Main module imports successfully')"
        python -c "import src.datacreator; print('✅ Data creator imports successfully')"
        python -c "import src.poem_analyzer; print('✅ Poem analyzer imports successfully')"
        python -c "import src.email_sender; print('✅ Email sender imports successfully')"
        echo "✅ All modules import successfully"
        
    - name: Test entry point
      run: |
        python daily_culture_bot.py --help
        echo "✅ Entry point works correctly"
